buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
	dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
     // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group = "com.github.glitchfiend.biomesoplenty"
version = "${config.minecraft_version}-${config.mod_version}"
archivesBaseName = "SereneSeasons"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    useDepAts = true
	mappings = project.config.mappings_version

    // gradle complains if this isn't set when setting up/using IDEA workspace
    runDir = "run"
    
    replace '@MOD_VERSION@', config.mod_version
    replace '1.0.0.0', config.forge_version
    replaceIn 'SereneSeasons.java'
}

def commonManifest = {
		attributes (
			"FMLCorePlugin": 'sereneseasons.asm.SSLoadingPlugin',
			"FMLCorePluginContainsFMLMod": 'true',
			"ForceLoadAsMod": 'true',
			"FMLAT": 'sereneseasons_at.cfg'
		)
}

jar {
	manifest commonManifest
    classifier = 'universal'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replaces
        expand ([
            'modid': project.archivesBaseName,
            'mod_version': project.config.mod_version,
            'minecraft_version': project.config.minecraft_version,
            'build_number': project.config.build_number
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from (sourceSets.main.output) {
        include 'LICENSE.txt'
    }

    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output

    manifest commonManifest
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from(sourceSets.main.allJava) {
        include 'sereneseasons/api/**'
    }
    from (sourceSets.main.output) {
        include 'LICENSE.txt'
        include 'sereneseasons/api/**'
    }

    classifier = 'api'
}

artifacts {
    archives sourcesJar
    archives deobfJar
	archives apiJar
}